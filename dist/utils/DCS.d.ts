export interface DCSOptions {
    encodeGroup?: number;
    dataEncoding?: number;
    compressedText?: boolean;
    textAlphabet?: number;
    useMessageClass?: boolean;
    classMessage?: number;
    discardMessage?: boolean;
    storeMessage?: boolean;
    storeMessageUCS2?: boolean;
    dataCodingAndMessageClass?: boolean;
    messageIndication?: number;
    messageIndicationType?: number;
}
export declare class DCS {
    static readonly CLASS_NONE = 0;
    static readonly CLASS_MOBILE_EQUIPMENT = 1;
    static readonly CLASS_SIM_SPECIFIC_MESSAGE = 2;
    static readonly CLASS_TERMINAL_EQUIPMENT = 3;
    static readonly INDICATION_TYPE_VOICEMAIL = 0;
    static readonly INDICATION_TYPE_FAX = 1;
    static readonly INDICATION_TYPE_EMAIL = 2;
    static readonly INDICATION_TYPE_OTHER = 3;
    static readonly ALPHABET_DEFAULT = 0;
    static readonly ALPHABET_8BIT = 1;
    static readonly ALPHABET_UCS2 = 2;
    static readonly ALPHABET_RESERVED = 3;
    private _encodeGroup;
    private _dataEncoding;
    private _compressedText;
    private _textAlphabet;
    private _useMessageClass;
    private _classMessage;
    private _discardMessage;
    private _storeMessage;
    private _storeMessageUCS2;
    private _dataCodingAndMessageClass;
    private _messageIndication;
    private _messageIndicationType;
    constructor(options?: DCSOptions);
    get encodeGroup(): number;
    get dataEncoding(): number;
    get compressedText(): boolean;
    get dataCodingAndMessageClass(): boolean;
    get discardMessage(): boolean;
    setDiscardMessage(): this;
    get storeMessage(): boolean;
    setStoreMessage(): this;
    get storeMessageUCS2(): boolean;
    setStoreMessageUCS2(): this;
    get messageIndication(): number;
    setMessageIndication(indication: number): this;
    get messageIndicationType(): number;
    setMessageIndicationType(type: number): this;
    get textTextCompressed(): boolean;
    setTextCompressed(compressed?: boolean): this;
    get textAlphabet(): number;
    setTextAlphabet(alphabet: number): this;
    get classMessage(): number;
    setClass(cls: number): this;
    get useMessageClass(): boolean;
    setUseMessageClass(use?: boolean): this;
    getValue(): number;
    toString(): string;
}
